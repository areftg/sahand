{"version":3,"file":"static/js/527.58c76c30.chunk.js","mappings":"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","sources":["webpack://sjm/./src/components/AlertPanel/AlertPanel.module.css?f5cf","utils/TimeInput.jsx","components/AlertPanel/AlertPanel.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"settingsPanel\":\"AlertPanel_settingsPanel__pXZzJ\",\"profilePanelIcon\":\"AlertPanel_profilePanelIcon__FQmnr\",\"toptitle\":\"AlertPanel_toptitle__nctep\",\"disabled\":\"AlertPanel_disabled__XoHSg\",\"tabs\":\"AlertPanel_tabs__bgCXy\",\"navButton\":\"AlertPanel_navButton__4QajJ\",\"deleteTabIcon\":\"AlertPanel_deleteTabIcon__9UDZr\",\"alerterror\":\"AlertPanel_alerterror__eYh57\",\"alarmError\":\"AlertPanel_alarmError__RCMPw\",\"button\":\"AlertPanel_button__KSVyU\",\"m\":\"AlertPanel_m__B78nA\",\"green\":\"AlertPanel_green__DnrVX\",\"first\":\"AlertPanel_first__-fNgy\",\"alarms\":\"AlertPanel_alarms__G1eK-\",\"delete\":\"AlertPanel_delete__O1yd7\",\"datetimeslot\":\"AlertPanel_datetimeslot__nIsVy\",\"datetimeslotbutton\":\"AlertPanel_datetimeslotbutton__MavUq\",\"name\":\"AlertPanel_name__nqftX\",\"alarmoff\":\"AlertPanel_alarmoff__rmXKO\",\"alarmcont\":\"AlertPanel_alarmcont__3m2Dx\",\"togglebutton\":\"AlertPanel_togglebutton__t+m4p\",\"circle\":\"AlertPanel_circle__U8TrM\",\"on\":\"AlertPanel_on__8cRWb\",\"onText\":\"AlertPanel_onText__mWWDA\",\"offText\":\"AlertPanel_offText__XgnhD\",\"radioOption\":\"AlertPanel_radioOption__thw4M\",\"radioOuterCircle\":\"AlertPanel_radioOuterCircle__rGCqI\",\"radioInnerCircle\":\"AlertPanel_radioInnerCircle__U9ic7\",\"radioLabel\":\"AlertPanel_radioLabel__S0jei\",\"selected\":\"AlertPanel_selected__ojzSK\",\"butcont\":\"AlertPanel_butcont__6zFLR\"};","import React, { useState, useEffect, useRef, useCallback } from 'react';\n\nfunction TimeInput({ defaultValue = '00:00', onTimeChange }) {\n  const [hour, setHour] = useState('00');\n  const [minute, setMinute] = useState('00');\n\n  const debounceTimeout = useRef(null);\n  const lastSentTime = useRef(defaultValue);\n\n  // ❗ تعریف توابع کمکی در ابتدای کامپوننت و با استفاده از useCallback\n  const formatTwoDigits = useCallback((val) => {\n    const num = parseInt(val, 10);\n    return isNaN(num) ? '00' : num.toString().padStart(2, '0');\n  }, []);\n\n  const removeLeadingZero = useCallback((val) => {\n    return String(parseInt(val, 10) || 0);\n  }, []);\n\n  // useEffect برای مقداردهی اولیه\n  useEffect(() => {\n    const [h = '00', m = '00'] = defaultValue.split(':');\n    const formattedH = formatTwoDigits(h);\n    const formattedM = formatTwoDigits(m);\n    setHour(formattedH);\n    setMinute(formattedM);\n    lastSentTime.current = `${formattedH}:${formattedM}`;\n  }, [defaultValue, formatTwoDigits]);\n\n\n  // useEffect اصلی برای ارسال اطلاعات با تأخیر\n  useEffect(() => {\n    clearTimeout(debounceTimeout.current);\n\n    debounceTimeout.current = setTimeout(() => {\n      const currentTime = `${formatTwoDigits(hour)}:${formatTwoDigits(minute)}`;\n      \n      if (onTimeChange && currentTime !== lastSentTime.current) {\n        onTimeChange(currentTime);\n        lastSentTime.current = currentTime;\n      }\n    }, 500);\n\n    return () => {\n      clearTimeout(debounceTimeout.current);\n    };\n  }, [hour, minute, onTimeChange, formatTwoDigits]); // ✅ حالا formatTwoDigits قبل از این هوک تعریف شده است\n\n\n  const handleChange = useCallback((val, type) => {\n    const cleanVal = val.replace(/[^\\d]/g, '').slice(0, 2);\n    let num = parseInt(cleanVal, 10);\n    if (isNaN(num)) num = 0;\n\n    if (type === 'hour') {\n      if (num > 23) num = 23;\n      setHour(String(num));\n    } else {\n      if (num > 59) num = 59;\n      setMinute(String(num));\n    }\n  }, []);\n\n  const handleFocus = useCallback((e) => {\n    e.target.select();\n    const type = e.target.name;\n    if (type === 'hour') {\n      setHour(removeLeadingZero);\n    } else {\n      setMinute(removeLeadingZero);\n    }\n  }, [removeLeadingZero]);\n\n  const handleBlur = useCallback((e) => {\n    const type = e.target.name;\n    if (type === 'hour') {\n      setHour(formatTwoDigits);\n    } else {\n      setMinute(formatTwoDigits);\n    }\n  }, [formatTwoDigits]);\n\n\n  return (\n    <div style={containerStyle}>\n      <input\n        type=\"text\"\n        inputMode=\"numeric\"\n        dir=\"rtl\"\n        name=\"hour\"\n        value={hour}\n        onChange={(e) => handleChange(e.target.value, 'hour')}\n        onFocus={handleFocus}\n        onBlur={handleBlur}\n        style={inputStyle}\n        placeholder=\"ساعت\"\n      />\n      <span style={colonStyle}>:</span>\n      <input\n        type=\"text\"\n        inputMode=\"numeric\"\n        dir=\"rtl\"\n        name=\"minute\"\n        value={minute}\n        onChange={(e) => handleChange(e.target.value, 'minute')}\n        onFocus={handleFocus}\n        onBlur={handleBlur}\n        style={inputStyle}\n        placeholder=\"دقیقه\"\n      />\n    </div>\n  );\n}\n\n// استایل‌ها (بدون تغییر)\nconst containerStyle = {\n  display: 'flex',\n  flexDirection: 'row-reverse',\n  alignItems: 'center',\n  fontFamily: 'bold',\n  fontSize: '16px',\n  direction: 'rtl',\n  backgroundColor: '#f0f0f0',\n  borderRadius: '9px',\n  padding: '6px',\n  gap: '6px',\n  width: 'fit-content',\n  height: '35px',\n  margin: '10px 0'\n};\n\nconst inputStyle = {\n  width: '30px',\n  textAlign: 'center',\n  fontFamily: 'bold',\n  fontSize: '15px',\n  fontWeight: 'bold',\n  padding: '3px',\n  border: '0',\n  outline: 'none',\n  borderRadius: '4px',\n  backgroundColor: 'transparent',\n  height: '25px'\n};\n\nconst colonStyle = {\n  fontSize: '20px',\n  margin: '0 4px',\n  fontFamily: 'bold'\n};\n\nexport default TimeInput;","import React, { useState, useEffect } from 'react';\nimport styles from \"./AlertPanel.module.css\";\nimport { useAlerts } from '../../Context/AlertContext';\nimport api, { endpoints } from '../../config/api';\n\n// وارد کردن کامپوننت‌ها و آیکون‌های مورد نیاز\nimport CloseIcon from '../../assets/icons/closee.svg';\nimport alertfill from '../../assets/icons/Alarm-set.svg';\nimport trash from \"../../assets/icons/Trash.svg\";\nimport Skeleton from 'react-loading-skeleton';\nimport 'react-loading-skeleton/dist/skeleton.css';\nimport TimeInput from '../../utils/TimeInput';\n\n// یک تابع کمکی برای ایجاد ID موقت در سمت کلاینت\nconst generateTempId = () => `new-${Date.now()}`;\n\nconst AlertPanel = ({ onClose }) => {\n    // 1. دریافت داده‌ها و توابع از کانتکست سراسری\n    const { timeSlots: initialAlerts, loading, error: contextError, refetch } = useAlerts();\n\n    // 2. State های محلی برای مدیریت فرم\n    const [alerts, setAlerts] = useState([]);\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const [submitError, setSubmitError] = useState({ message: null, sourceId: null });\n    const [isAutoAlertsOn, setIsAutoAlertsOn] = useState(false); // برای دکمه تاگل\n\n    // 3. همگام‌سازی state محلی با داده‌های دریافتی از کانتکست\n    useEffect(() => {\n        // این لاگ به شما نشان می‌دهد که چه داده‌ای از کانتکست به این کامپوننت می‌رسد\n        console.log(\"AlertPanel received from context:\", { initialAlerts, loading, contextError });\n\n        // فقط در صورتی که داده‌ها معتبر باشند، state محلی را آپدیت کن\n        if (initialAlerts && Array.isArray(initialAlerts)) {\n            // استفاده از کپی عمیق برای جلوگیری از تغییر ناخواسته state اصلی در کانتکست\n            setAlerts(JSON.parse(JSON.stringify(initialAlerts)));\n        }\n    }, [initialAlerts, loading, contextError]); // وابستگی به هر سه برای اطمینان از همگام‌سازی\n\n    // 4. توابع مدیریت رویدادها (Event Handlers)\n\n    const handleTimeUpdate = (newTime, alertId, field) => {\n        setAlerts(currentAlerts =>\n            currentAlerts.map(alert =>\n                alert.id === alertId ? { ...alert, [field]: newTime } : alert\n            )\n        );\n        setSubmitError({ message: null, sourceId: null }); // پاک کردن خطا هنگام ویرایش\n    };\n\n    // تابع کمکی برای تبدیل اعداد به معادل فارسی\nconst toPersianNumeral = (number) => {\n    const persianNumbers = {\n        1: 'اول',\n        2: 'دوم',\n        3: 'سوم',\n        4: 'چهارم',\n        5: 'پنجم',\n        6: 'ششم',\n        7: 'هفتم',\n        8: 'هشتم',\n        9: 'نهم',\n        10: 'دهم',\n        // می‌توانید موارد بیشتری اضافه کنید\n    };\n    return persianNumbers[number] || number.toString(); // اگر عدد در لیست نبود، همان عدد را برگردان\n};\n\n    const handleAddAlert = () => {\n        // محاسبه شماره زنگ جدید بر اساس تعداد زنگ‌های موجود\n        const alertCount = alerts.length + 1;\n        const newAlertName = `زنگ ${toPersianNumeral(alertCount)}`;\n    \n        const newAlert = {\n            id: generateTempId(),\n            name: newAlertName, // تنظیم نام به‌صورت \"زنگ اول\"، \"زنگ دوم\" و غیره\n            start_time: '00:00',\n            end_time: '00:00',\n            type: \"class_period\",\n            isActive: true,\n            isNew: true,\n        };\n        setAlerts(prevAlerts => [...prevAlerts, newAlert]);\n    };\n\n    const handleDeleteAlert = (alertIdToDelete) => {\n        setAlerts(currentAlerts => {\n            const updatedAlerts = currentAlerts\n                .filter(alert => alert.id !== alertIdToDelete)\n                .map((alert, index) => ({\n                    ...alert,\n                    name: `زنگ ${toPersianNumeral(index + 1)}`, // تنظیم مجدد نام‌ها\n                }));\n            return updatedAlerts;\n        });\n    };\n\n    const handleToggleAutoAlerts = () => {\n        setIsAutoAlertsOn(prevState => !prevState);\n        // TODO: ارسال API برای ذخیره وضعیت کلی زنگ اتوماتیک\n    };\n\n    const handleSubmit = async () => {\n        setIsSubmitting(true);\n        setSubmitError({ message: null, sourceId: null });\n\n        const createPromises = [];\n        const updatePromises = [];\n        const deletePromises = [];\n\n        const currentAlertIds = new Set(alerts.map(a => a.id));\n\n        // شناسایی آیتم‌های حذف شده\n        initialAlerts.forEach(initialAlert => {\n            if (!currentAlertIds.has(initialAlert.id)) {\n                deletePromises.push(api.delete(`${endpoints.adddtimeslot()}/${initialAlert.id}`));\n            }\n        });\n\n        // شناسایی آیتم‌های جدید و ویرایش شده\n        alerts.forEach(alert => {\n            if (alert.isNew) {\n                const { id, isNew, ...payload } = alert; // حذف پراپرتی‌های سمت کلاینت\n                createPromises.push(api.post(endpoints.timeslot(), payload));\n            } else {\n                const originalAlert = initialAlerts.find(a => a.id === alert.id);\n                if (originalAlert && (originalAlert.start_time !== alert.start_time || originalAlert.end_time !== alert.end_time)) {\n                    const payload = {\n                        name: alert.name,\n                        start_time: alert.start_time,\n                        end_time: alert.end_time,\n                        type: alert.type,\n                        isActive: alert.isActive,\n                        academic_level_id: alert.academic_level?.id,\n                    };\n                    updatePromises.push(api.put(`${endpoints.adddtimeslot()}/${alert.id}`, payload));\n                }\n            }\n        });\n\n        try {\n            await Promise.all([...createPromises, ...updatePromises, ...deletePromises]);\n            await refetch(); // فراخوانی مجدد داده‌های سراسری برای همگام‌سازی\n      \n        } catch (err) {\n            const errorMessages = err.response?.data?.errors\n                ? Object.values(err.response.data.errors).flat().join(' ')\n                : \"خطا در ثبت تغییرات. لطفاً ورودی‌ها را بررسی کنید.\";\n            setSubmitError({ message: errorMessages, sourceId: null });\n        } finally {\n            setIsSubmitting(false);\n        }\n    };\n\n    // 5. منطق رندر کامپوننت\n\n    // نمایش حالت لودینگ تا زمانی که داده‌ها از کانتکست دریافت شوند\n    if (loading) {\n        return (\n            <div className={styles.settingsPanel}>\n                <img className={styles.profilePanelIcon} src={CloseIcon} alt='بستن' onClick={onClose} />\n                <img className={styles.toptitle} src={alertfill} alt='آیکون زنگ' />\n                <h3>سیستم زنگ هوشمند</h3>\n                <div className={`${styles.button} ${styles.green}`}>زنگ زدن به صورت دستی</div>\n                <div className={`${styles.button}`}><Skeleton style={{ margin: \"10px 10px\", borderRadius: \"25px\" }} duration={2} height={34} width={80} /> زنگ اتوماتیک</div>\n                <Skeleton duration={2} highlightColor=\"#69b0b2\" count={5} style={{ margin: \"10px 0\" }} height={50} />\n            </div>\n        );\n    }\n\n    // محاسبه اینکه آیا تغییری برای ثبت وجود دارد یا نه\n    const hasChanges = JSON.stringify(alerts) !== JSON.stringify(initialAlerts);\n\n    return (\n        <div className={styles.settingsPanel}>\n            <img className={styles.profilePanelIcon} src={CloseIcon} alt='بستن' onClick={onClose} />\n            <img className={styles.toptitle} src={alertfill} alt='آیکون زنگ' />\n            <h3>سیستم زنگ هوشمند</h3>\n\n            {submitError.message && <p className={styles.alerterror}>{submitError.message}</p>}\n            {contextError.message && <p className={styles.alerterror}>{contextError.message}</p>}\n\n            <div className={`${styles.button} ${styles.green} ${styles.first}`}>زنگ زدن به صورت دستی</div>\n            <div className={`${styles.button}`} onClick={handleToggleAutoAlerts}>\n                <div className={`${styles.togglebutton} ${isAutoAlertsOn ? styles.on : ''}`}>\n                    <span className={styles.onText}>روشن</span>\n                    <span className={styles.offText}>خاموش</span>\n                    <div className={styles.circle}></div>\n                </div> زنگ اتوماتیک\n            </div>\n\n            {/* رندر لیست زنگ‌ها */}\n            {alerts && alerts.length > 0 ? (\n                alerts.map((alert) => (\n                    <div\n                        className={`${styles.alarms} ${!alert.isActive ? styles.alarmoff : ''} ${alert.isNew ? styles.newAlarm : ''}`}\n                        key={alert.id}\n                    >\n                        <div className={styles.delete} onClick={() => handleDeleteAlert(alert.id)}>\n                            <img src={trash} alt=\"حذف\" />\n                        </div>\n                        <p className={styles.name}>{alert.name}</p>\n                        <div className={styles.alarmcont}>\n                            <p>از</p>\n                            <TimeInput\n                                defaultValue={alert.start_time}\n                                onTimeChange={(newTime) => handleTimeUpdate(newTime, alert.id, 'start_time')}\n                            />\n                            <p>تا</p>\n                            <TimeInput\n                                defaultValue={alert.end_time}\n                                onTimeChange={(newTime) => handleTimeUpdate(newTime, alert.id, 'end_time')}\n                            />\n                        </div>\n                    </div>\n                ))\n            ) : (\n                <p className={styles.noAlertsMessage}>در حال حاضر هیچ زنگی تعریف نشده است.</p>\n            )}\n\n            {/* دکمه‌های پایین پنل */}\n            <div className={styles.butcont}>\n                <div className={`${styles.button}  ${styles.green}`} onClick={handleAddAlert}>\n                    <p>افزودن زنگ جدید</p>\n                    <div><p>+</p></div>\n                </div>\n                <button\n                    className={`${styles.button} ${styles.green}`}\n                    onClick={handleSubmit}\n                    disabled={!hasChanges || isSubmitting}\n                >\n                    {isSubmitting ? 'در حال ثبت...' : 'ثبت تغییرات'}\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default AlertPanel;"],"names":["containerStyle","display","flexDirection","alignItems","fontFamily","fontSize","direction","backgroundColor","borderRadius","padding","gap","width","height","margin","inputStyle","textAlign","fontWeight","border","outline","colonStyle","_ref","defaultValue","onTimeChange","hour","setHour","useState","minute","setMinute","debounceTimeout","useRef","lastSentTime","formatTwoDigits","useCallback","val","num","parseInt","isNaN","toString","padStart","removeLeadingZero","String","useEffect","h","m","split","formattedH","formattedM","current","concat","clearTimeout","setTimeout","currentTime","handleChange","type","cleanVal","replace","slice","handleFocus","e","target","select","name","handleBlur","_jsxs","style","children","_jsx","inputMode","dir","value","onChange","onFocus","onBlur","placeholder","onClose","timeSlots","initialAlerts","loading","error","contextError","refetch","useAlerts","alerts","setAlerts","isSubmitting","setIsSubmitting","submitError","setSubmitError","message","sourceId","isAutoAlertsOn","setIsAutoAlertsOn","console","log","Array","isArray","JSON","parse","stringify","handleTimeUpdate","newTime","alertId","field","currentAlerts","map","alert","id","_objectSpread","toPersianNumeral","number","className","styles","settingsPanel","profilePanelIcon","src","CloseIcon","alt","onClick","toptitle","alertfill","button","green","Skeleton","duration","highlightColor","count","hasChanges","alerterror","first","handleToggleAutoAlerts","prevState","togglebutton","on","onText","offText","circle","length","alarms","isActive","alarmoff","isNew","newAlarm","delete","handleDeleteAlert","alertIdToDelete","filter","index","trash","alarmcont","TimeInput","start_time","end_time","noAlertsMessage","butcont","handleAddAlert","alertCount","newAlertName","newAlert","Date","now","prevAlerts","async","createPromises","updatePromises","deletePromises","currentAlertIds","Set","a","forEach","initialAlert","has","push","api","endpoints","adddtimeslot","payload","_objectWithoutProperties","_excluded","post","timeslot","originalAlert","find","_alert$academic_level","academic_level_id","academic_level","put","Promise","all","err","_err$response","_err$response$data","errorMessages","response","data","errors","Object","values","flat","join","disabled"],"sourceRoot":""}